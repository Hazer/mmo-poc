apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlinx-serialization'

sourceSets {
    main.kotlin.srcDirs += "src"
    main.resources.srcDirs += "resources"
    main.resources.srcDirs += "../resources"
    test.kotlin.srcDirs += "test"
    test.resources.srcDirs += "testresources"
}

dependencies {
    expectedBy project(":mmo")
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    compile "com.soywiz:korge-js:$korge_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

compileKotlin2Js {
    kotlinOptions.outputFile = "${rootProject.projectDir}/${web_dir}/game.js"
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = false
    kotlinOptions.metaInfo = false
}

task buildAndCopy(type: Copy, dependsOn: ['build']) {
    // Copy kotlin.js and kotlin-meta.js from jar into web directory
    configurations.compile.each { File file ->
        //println(file.absolutePath)
        from(zipTree(file.absolutePath)) {
            exclude "**/*.meta.js", "**/*.kjsm"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

    from(new File("${buildDir}/resources/main")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    // Copy scripts to web directory
    from(new File("${buildDir}/classes/main")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    from(new File("${buildDir}/classes/test")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    from(new File("${buildDir}/resources/test")) {
        exclude "**/*.meta.js", "**/*.kjsm"
    }

    includeEmptyDirs = false
    into "${rootProject.projectDir}/${web_dir}"
}

clean.doFirst() {
    delete("${rootProject.projectDir}/${web_dir}")
}
