buildscript {
    ext.kotlin_version = '1.2.50'
    ext.serialization_version = '0.5.1'
    ext.ktor_version = '0.9.2'
    ext.logback_version = '1.2.3'
    ext.korge_version = '0.31.0'
    ext.web_dir = 'web'

    repositories {
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:$serialization_version"
    }
}

subprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url "https://dl.bintray.com/soywiz/soywiz" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }


    it.afterEvaluate {
        sourceSets {
            main.kotlin.srcDirs += "src"
            main.resources.srcDirs += "resources"
            test.kotlin.srcDirs += "test"
            test.resources.srcDirs += "testresources"
        }

        //def common = it.plugins.hasPlugin("kotlin-platform-common")
        //def js = it.plugins.hasPlugin("kotlin-platform-js") || it.plugins.hasPlugin("kotlin2js")
        //def jvm = it.plugins.hasPlugin("kotlin-platform-jvm") || it.plugins.hasPlugin("kotlin")
        //if (common || js || jvm) {
        //
        //    //println("Configured for ${it}")
        //} else {
        //    //println("Not configured for ${it}")
        //}
        //if (js) {
        //    [compileKotlin2Js, compileTestKotlin2Js]*.configure {
        //        kotlinOptions.moduleKind = "umd"
        //        kotlinOptions.sourceMap = false
        //        kotlinOptions.metaInfo = false
        //    }
        //}
    }
}

